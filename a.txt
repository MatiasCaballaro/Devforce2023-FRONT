package com.gire.rp.configR4;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;
import org.springframework.session.FindByIndexNameSessionRepository;
import org.springframework.session.Session;

import com.gire.rp.authentication.CustomBasicAuthenticationFilter;

@Profile("!noSecure")
@EnableWebSecurity
@Configuration
public class SpringSecurityConfig<S extends Session> extends SpringSecurityConfigBase<S> {

    /
     * Para el control de las sesiones concurrentes
     /
    @Autowired
    public void setSessionRepository(FindByIndexNameSessionRepository<S> sessionRepository) {
        this.sessionRepository = sessionRepository;
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
      http.httpBasic()
      .and().authorizeRequests().antMatchers("/token/").anonymous()
      .and()
          .exceptionHandling().authenticationEntryPoint(getEntryPoint())
      .and()
          .addFilterAt(new CustomBasicAuthenticationFilter(authenticationManagerBean()), BasicAuthenticationFilter.class)
          .authorizeRequests().antMatchers("/actuator/").permitAll()
      .and()
        .authorizeRequests().antMatchers("/login").permitAll().anyRequest().authenticated()
      .and()
        .requiresChannel().anyRequest().requiresSecure()
      .and()
          .csrf().disable()
          .sessionManagement().maximumSessions(1).sessionRegistry(sessionRegistry())
          .maxSessionsPreventsLogin(false).expiredUrl("/login").and().invalidSessionUrl("/login")
      ;
    }

}